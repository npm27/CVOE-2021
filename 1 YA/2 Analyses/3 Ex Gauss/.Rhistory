REML = T)
summary(pm.final)
Anova(pm.final)
##going to start w/ Parenting motives
#build the final model first
pm.final = lmer(Score ~ Sex * Motive * fWHR + (1|id),
data = dat_scale,
REML = F)
summary(pm.final)
Anova(pm.final)
#intercept only model
pm.intercept = lmer(Score ~ (1|id),
data = dat_scale,
REML = F)
summary(pm.intercept)
Anova(pm.intercept)
summary(pm.intercept)
#between only
pm.between = lmer(Score ~ Sex + (1|id),
data = dat_scale,
REML = F)
#between only
pm.between = lmer(Score ~ Sex + Sex + Motive + fWHR + (1|id),
data = dat_scale,
REML = F)
#main effects only
pm.me = lmer(Score ~ Sex + Motive + fWHR + (1|id),
data = dat_scale,
REML = F)
summary(pm.me)
Anova(pm.me)
##Model comparison
anova(pm.intercept, pm.between, pm.me, pm.final)
##Now for the Mating interest model
#build the final model
mi.final = lmer(Score ~ Sex * Context * fWHR + (1|id),
data = dat_Context,
REML = F)
summary(mi.final)
Anova(mi.final)
#intercept only
mi.intercept = lmer(Score ~ (1|id),
data = dat_Context,
REML = F)
mi.between = lmer(Score ~ Sex + (1|id),
data = dat_Context,
REML = F)
#main effects
mi.me = lmer(Score ~ Sex + Context + fWHR + (1|id),
data = dat_Context,
REML = F)
##model comparisons
anova(mi.intercept, mi.between, mi.me, mi.final)
#intercept only model
pm.intercept = lmer(Score ~ (1|id),
data = dat_scale,
REML = F)
summary(pm.intercept)
#between only
pm.between = lmer(Score ~ Sex + (1|id),
data = dat_scale,
REML = F)
#main effects only
pm.me = lmer(Score ~ Sex + Motive + fWHR + (1|id),
data = dat_scale,
REML = F)
##Model comparison
anova(pm.intercept, pm.between, pm.me, pm.final) ##final model provides best fit
##model comparisons
anova(mi.intercept, mi.between, mi.me, mi.final)
setwd("~/GitHub/Mitch-FWHR/Study 4")
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 4.sav"))
dat = as.data.frame(dat)
View(dat)
####Get the dataset in the correct shape####
dat = melt(dat[ , -c(3, 45:50)], id.vars = c("id", "Sex", "Condition"))
View(dat)
##make label columns for fwhr and parenting role
dat$fwhr = dat$variable
substr(dat$fwhr, 0, 1)
dat$fwhr = substr(dat$fwhr, 0, 1)
sub('.*(?=.{2}$)', '', dat$variable perl = T)
sub('.*(?=.{2}$)', '', dat$variable, perl = T)
sub('.*(?=.{2}$)', '.', dat$variable, perl = T)
sub('.*(?=..{2}$)', '', dat$variable, perl = T)
sub('.*(?={2}$)', '', dat$variable, perl = T)
sub('..*(?=.{2}$)', '', dat$variable, perl = T)
sub('.*(?=.{2}$)', '', dat$variable, perl = T)
#parenting
dat$variable = sub('.*(?=.{2}$)', '', dat$variable, perl = T)
dat$variable = substr(dat$variable, 1, 1)
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 4.sav"))
dat = as.data.frame(dat)
####Get the dataset in the correct shape####
dat = melt(dat[ , -c(3, 45:50)], id.vars = c("id", "Sex", "Condition"))
##make label columns for fwhr and parenting role
#fwhr
dat$fwhr = dat$variable
dat$fwhr = substr(dat$fwhr, 0, 1)
#parenting
dat$variable = sub('.*(?=.{2}$)', '', dat$variable, perl = T)
substr(dat$variable, 0, 1)
substr(dat$variable, 1, 0)
sub('.*(?=.{2}$)', '', dat$variable, perl = T)
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 4.sav"))
dat = as.data.frame(dat)
####Get the dataset in the correct shape####
dat = melt(dat[ , -c(3, 45:50)], id.vars = c("id", "Sex", "Condition"))
##make label columns for fwhr and parenting role
#fwhr
dat$fwhr = dat$variable
dat$fwhr = substr(dat$fwhr, 0, 1)
#parenting
dat$variable = sub('.*(?=.{1}$)', '', dat$variable, perl = T)
table(dat$variable)
colnames(dat)[4] = "Parenting"
#make the score column
colnames(dat)[5] = "Score"
dat$Score = as.numeric(dat$Score)
####Run the models!####
##Make the final model first
model.final = lmer(Score ~ Sex * Parenting * fwhr * Condition + (1|id),
data = dat,
REML = FALSE)
summary(model.final)
Anova(model.final)
#int only model
model.int = lmer(Score ~  (1|id),
data = dat,
REML = FALSE)
summary(model.int)
Anova(model.int)
#between only
model.between = lmer(Score ~ Sex + Condition + (1|id),
data = dat,
REML = FALSE)
summary(model.between)
Anova(model.between)
##main effects only
model.mf = lmer(Score ~ Sex + Parenting + fwhr + Condition + (1|id),
data = dat,
REML = FALSE)
summary(model.mf)
Anova(model.mf)
##compare models
anova(model.int, model.between, model.mf, model.final)
setwd("~/GitHub/Mitch-FWHR/Study 5")
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 5.sav"))
dat = as.data.frame(dat)
View(dat)
####Get the dataset in the correct shape####
dat = melt(dat[ , -c(43:57)], id.vars = c("id", "Sex"))
#fwhr
dat$fwhr = dat$variable
dat$fwhr = substr(dat$fwhr, 0, 1)
View(dat)
table(dat$fwhr)
sub('.*(?=.{1}$)', '', dat$variable, perl = T)
#target sex
dat$Target_Sex = sub('.*(?=.{1}$)', '', dat$variable, perl = T)
table(dat$Target_Sex)
sub('.*(?=.{1}$)', '', dat$variable, perl = T)
sub('.*(?=.{2}$)', '', dat$variable, perl = T)
##parenting
#parenting
dat$variable = sub('.*(?=.{2}$)', '', dat$variable, perl = T)
table(dat$variable)
substr(dat$variable, 1, 1)
dat$variable = substr(dat$variable, 1, 1)
colnames(dat)[3] = "Parenting"
##score
colnames(dat)[4] = "Score"
dat$Score = as.numeric(dat$Score)
####Model Time!####
##Make the final model first
model.final = lmer(Score ~ Sex * Parenting * fwhr * Target_Sex + (1|id),
data = dat,
REML = FALSE)
summary(model.final)
Anova(model.final)
##intercept only
model.int = lmer(Score ~  + (1|id),
data = dat,
REML = FALSE)
##intercept only
model.int = lmer(Score ~ (1|id),
data = dat,
REML = FALSE)
#between only
model.int = lmer(Score ~ Sex + Target_Sex + (1|id),
data = dat,
REML = FALSE)
#main effects only
model.mf = lmer(Score ~ Sex + Parenting + fwhr + Target_Sex + (1|id),
data = dat,
REML = FALSE)
##intercept only
model.int = lmer(Score ~ (1|id),
data = dat,
REML = FALSE)
summary(model.int)
#between only
model.between = lmer(Score ~ Sex + Target_Sex + (1|id),
data = dat,
REML = FALSE)
summary(model.between)
##compare models
anova(model.int, model.between, model.mf, model.final)
setwd("~/GitHub/Mitch-FWHR/Study 6")
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 6.sav"))
dat = as.data.frame(dat)
View(dat)
setwd("~/GitHub/CVOE-2021/1 YA/2 Analyses/2 Vincentiles")
####set up####
##libraries
library(tidyverse)
library(vecsets)
library(reshape)
##read in data
keeps = read.csv("Good Subjects.csv")
dat = read.csv("data/Final_CVOE_Trimmed 11_20_21.csv")
##cut out participants we aren't using
dat2 = dat[(dat$Subject %in% keeps$Sub.ID), ]
##get Trial types
#pure
pure = subset(dat2,
dat2$block_type == "cv" | dat2$block_type == "oe")
pure$type = rep("pure")
#Alt
alt = subset(dat2,
dat2$block_type == "alt")
alt_switch = subset(alt,
alt$Switch == "Y")
alt_ns = subset(alt,
alt$Switch == "N")
alt_switch$type = rep("alt_switch")
alt_ns$type = rep("alt_ns")
#rand
rand = subset(dat2,
dat2$block_type == "shuf")
rand_switch = subset(rand,
rand$Switch == "Y")
rand_ns = subset(rand,
rand$Switch == "N")
rand_switch$type = rep("rand_switch")
rand_ns$type = rep("rand_ns")
##put back together
combined = rbind(pure, alt_ns, alt_switch, rand_ns, rand_switch)
#get only correct trials
RT = subset(combined,
combined$score2 == 1)
#drop unused columns
RT = RT[ , -c(1, 3:11, 13:20)]
####compute the vincentiles####
num_vins = 6 # how many vincentiles do you want
data3 = RT %>% group_by(Subject, type) %>%
mutate(bin = ntile(RT,  num_vins)) %>%
group_by(Subject, type, bin) %>%
summarize(mean = mean(RT, na.rm = T))
##Okay, get the mean
means = tapply(data3$mean, list(data3$type, data3$bin), mean)
length(unique(data3$Subject))
##95%CIs
sds = tapply(data3$mean, list(data3$type, data3$bin), sd)
CI = (sds / sqrt(length(unique(data3$Subject)))) * 1.96
uppers = means + CI
lowers = means - CI
####now format and write to file for making plot####
##Means
means2 = t(means)
means2 = as.data.frame(means2)
means2$bin = rep(1:nrow(means2))
means_long = melt(means2,
id.vars = "bin")
colnames(means_long)[2:3] = c("Trial_Type", "Average")
##upper CI
upper2 = t(uppers)
upper2 = as.data.frame(upper2)
upper2$bin = rep(1:nrow(upper2))
upper_long = melt(upper2,
id.vars = "bin")
colnames(upper_long)[2:3] = c("Trial_Type", "Upper")
##Lower CI
lower2 = t(lowers)
lower2 = as.data.frame(lower2)
lower2$bin = rep(1:nrow(lower2))
lower_long = melt(lower2,
id.vars = "bin")
colnames(lower_long)[2:3] = c("Trial_Type", "Lower")
##combined and write to file
Final = cbind(means_long, upper_long, lower_long)
Final = Final[ , -c(4:5, 7:8)]
#write.csv(Final, file = "vincentiles.csv", row.names = F)
View(Final)
write.csv(Final, file = "vincentiles.csv", row.names = F)
setwd("~/GitHub/CVOE-2021/1 YA/2 Analyses/3 Ex Gauss")
####Set up####
##libraries
library(retimes)
keeps = read.csv("Good Subjects.csv")
dat = read.csv("data/Final_CVOE_Trimmed 11_20_21.csv")
##cut out participants we aren't using
dat2 = dat[(dat$Subject %in% keeps$Sub.ID), ]
##get Trial types
#pure
pure = subset(dat2,
dat2$block_type == "cv" | dat2$block_type == "oe")
pure$type = rep("pure")
#Alt
alt = subset(dat2,
dat2$block_type == "alt")
alt_switch = subset(alt,
alt$Switch == "Y")
alt_ns = subset(alt,
alt$Switch == "N")
alt_switch$type = rep("alt_switch")
alt_ns$type = rep("alt_ns")
#rand
rand = subset(dat2,
dat2$block_type == "shuf")
rand_switch = subset(rand,
rand$Switch == "Y")
rand_ns = subset(rand,
rand$Switch == "N")
rand_switch$type = rep("rand_switch")
rand_ns$type = rep("rand_ns")
####Ex-GAUSS TIME####
##Start w/ pure
pure = subset(pure,
pure$score2 == 1)
pure = pure[ , -c(1, 3:11, 13:20)]
##need to loop over subjects
mu = c()
sigma = c()
tau = c()
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
sigma = c(sigma, temp2@par[2])
tau = c(tau, temp2@par[3])
}
##get means, uppers, lowers
CIm = (sd(mu) / sqrt(length(mu))) * 1.96
CIs = (sd(sigma) / sqrt(length(mu))) * 1.96
CIt = (sd(tau) / sqrt(length(mu))) * 1.96
#combine
parameter = c("mu", "sigma", "tau")
Average = c(mean(mu), mean(sigma), mean(tau))
Upper = c(mean(mu) + CIm, mean(sigma) + CIs, mean(tau) + CIt)
Lower = c(mean(mu) - CIm, mean(sigma) - CIs, mean(tau) - CIt)
Trial_Type = rep("pure", times = 3)
final_pure = data.frame(parameter, Average, Upper, Lower, Trial_Type)
##alt_ns
alt_ns = subset(alt_ns,
alt_ns$score2 == 1)
alt_ns = alt_ns[ , -c(1, 3:11, 13:20)]
##need to loop over subjects
mu = c()
sigma = c()
tau = c()
for(i in unique(alt_ns$Subject)){
temp = subset(alt_ns, alt_ns$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
sigma = c(sigma, temp2@par[2])
tau = c(tau, temp2@par[3])
}
##get means, uppers, lowers
CIm = (sd(mu) / sqrt(length(mu))) * 1.96
CIs = (sd(sigma) / sqrt(length(mu))) * 1.96
CIt = (sd(tau) / sqrt(length(mu))) * 1.96
#combine
parameter = c("mu", "sigma", "tau")
Average = c(mean(mu), mean(sigma), mean(tau))
Upper = c(mean(mu) + CIm, mean(sigma) + CIs, mean(tau) + CIt)
Lower = c(mean(mu) - CIm, mean(sigma) - CIs, mean(tau) - CIt)
Trial_Type = rep("Alt_ns", times = 3)
final_alt_ns = data.frame(parameter, Average, Upper, Lower, Trial_Type)
##alt_switch
alt_switch = subset(alt_switch,
alt_switch$score2 == 1)
alt_switch = alt_switch[ , -c(1, 3:11, 13:20)]
##need to loop over subjects
mu = c()
sigma = c()
tau = c()
for(i in unique(alt_switch$Subject)){
temp = subset(alt_switch, alt_switch$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
sigma = c(sigma, temp2@par[2])
tau = c(tau, temp2@par[3])
}
##get means, uppers, lowers
CIm = (sd(mu) / sqrt(length(mu))) * 1.96
CIs = (sd(sigma) / sqrt(length(mu))) * 1.96
CIt = (sd(tau) / sqrt(length(mu))) * 1.96
#combine
parameter = c("mu", "sigma", "tau")
Average = c(mean(mu), mean(sigma), mean(tau))
Upper = c(mean(mu) + CIm, mean(sigma) + CIs, mean(tau) + CIt)
Lower = c(mean(mu) - CIm, mean(sigma) - CIs, mean(tau) - CIt)
Trial_Type = rep("alt_switch", times = 3)
final_alt_switch = data.frame(parameter, Average, Upper, Lower, Trial_Type)
##rand_ns
rand_ns = subset(rand_ns,
rand_ns$score2 == 1)
rand_ns = rand_ns[ , -c(1, 3:11, 13:20)]
##need to loop over subjects
mu = c()
sigma = c()
tau = c()
for(i in unique(rand_ns$Subject)){
temp = subset(rand_ns, rand_ns$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
sigma = c(sigma, temp2@par[2])
tau = c(tau, temp2@par[3])
}
##get means, uppers, lowers
CIm = (sd(mu) / sqrt(length(mu))) * 1.96
CIs = (sd(sigma) / sqrt(length(mu))) * 1.96
CIt = (sd(tau) / sqrt(length(mu))) * 1.96
#combine
parameter = c("mu", "sigma", "tau")
Average = c(mean(mu), mean(sigma), mean(tau))
Upper = c(mean(mu) + CIm, mean(sigma) + CIs, mean(tau) + CIt)
Lower = c(mean(mu) - CIm, mean(sigma) - CIs, mean(tau) - CIt)
Trial_Type = rep("rand_ns", times = 3)
final_rand_ns = data.frame(parameter, Average, Upper, Lower, Trial_Type)
##rand_switch
rand_switch = subset(rand_switch,
rand_switch$score2 == 1)
rand_switch = rand_switch[ , -c(1, 3:11, 13:20)]
##need to loop over subjects
mu = c()
sigma = c()
tau = c()
for(i in unique(rand_switch$Subject)){
temp = subset(rand_switch, rand_switch$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
sigma = c(sigma, temp2@par[2])
tau = c(tau, temp2@par[3])
}
##get means, uppers, lowers
CIm = (sd(mu) / sqrt(length(mu))) * 1.96
CIs = (sd(sigma) / sqrt(length(mu))) * 1.96
CIt = (sd(tau) / sqrt(length(mu))) * 1.96
#combine
parameter = c("mu", "sigma", "tau")
Average = c(mean(mu), mean(sigma), mean(tau))
Upper = c(mean(mu) + CIm, mean(sigma) + CIs, mean(tau) + CIt)
Lower = c(mean(mu) - CIm, mean(sigma) - CIs, mean(tau) - CIt)
Trial_Type = rep("rand_switch", times = 3)
final_rand_switch = data.frame(parameter, Average, Upper, Lower, Trial_Type)
##Combine and write to file
final = rbind(final_pure, final_alt_ns, final_alt_switch, final_rand_ns, final_rand_switch)
#write.csv(final, file = "ex_gauss_ya.csv", row.names = F)
View(final)
write.csv(final, file = "ex_gauss_ya.csv", row.names = F)
