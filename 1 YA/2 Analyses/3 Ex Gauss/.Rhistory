melt(dat,
id = c("Subject", "Encoding"))
melt(dat,
id = "Encoding")
melt(dat,
id = "Subject")
reshape::melt(dat)
reshape::melt(dat)
dat = data.frame(dat)
reshape::melt(dat)
dat_long = melt(dat,
id = c("Subject", "Encoding"))
View(dat_long)
library(splitstackshape)
substr(dat_long$variable)
substr(dat_long$variable, 1)
substr(dat_long$variable, 1, 1)
dat_long$direction = substr(dat_long$variable, 1, 1)
substring(dat_long$variable, 1)
substring(dat_long$variable, -1)
substring(dat_long$variable, 2)
dat_bin = substring(dat_long$variable, 2)
dat_long$bin = substring(dat_long$variable, 2)
dat_long = dat_long[ , -3]
colnames(dat_long)[3] = "Recall"
dat_long$diff1 = as.numeric(dat_long$bin) - dat_long$Recall
dat_long$diff2 = abs(dat_long$diff1)
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = .(bin, Encoding),
within = direction,
dv = diff1,
type = 3,
detailed = T)
model
options(scipen = 999)
model
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = .(bin, Encoding),
within = direction,
dv = diff2,
type = 3,
detailed = T)
model
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = .(bin, Encoding),
within = direction,
dv = diff1,
type = 3,
detailed = T)
model
##descriptives
tapply(dat_long$diff1, list(dat_long$direction, dat_long$bIN), mean)
##descriptives
tapply(dat_long$diff1, list(dat_long$direction, dat_long$bin), mean)
read = subset(dat_long,
dat_long$Encoding == "Read")
IS = subset(dat_long,
dat_long$Encoding == "IS")
RL = subset(dat_long,
dat_long$Encoding == "RL")
tapply(read$diff1, list(read$direction, read$bin), mean)
read$diff1
read = subset(dat_long,
dat_long$Encoding == "READ")
tapply(read$diff1, list(read$direction, read$bin), mean)
tapply(IS$diff1, list(IS$direction, IS$bin), mean)
tapply(RL$diff1, list(RL$direction, RL$bin), mean)
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = Encoding,
within = .(bin, direction),
dv = diff1,
type = 3,
detailed = T)
model
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = Encoding,
within = .(bin, direction),
dv = diff2,
type = 3,
detailed = T)
model
setwd("~/")
dat = read.csv("Updated conf plots.csv")
library(ez)
tapply(dat$Difference, list(dat$Direction, dat$BIN), mean)
read = subset(dat,
dat$Encoding == "Read")
IS = subset(dat,
dat$Encoding == "IS")
RL = subset(dat,
dat$Encoding == "RL")
tapply(read$Difference2, list(read$Direction, read$BIN), mean)
tapply(IS$Difference2, list(IS$Direction, IS$BIN), mean)
tapply(RL$Difference2, list(RL$Direction, RL$BIN), mean)
dat$BIN = factor(dat$BIN)
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(BIN, Encoding, Direction),
dv = Difference2,
type = 3,
detailed = T)
model
130*4
install.packages("retimes")
url = "https://cran.r-project.org/src/contrib/Archive/retimes/retimes_0.1-2.tar.gz"
pkgFile = "retimes_0.1-2.tar.gz"
download.file(url = url, destfile = pkgFile)
install.packages(pkgs=pkgFile, type="source", repos=NULL)
unlink(pkgFile)
library(retimes)
setwd("C:/Users/nmaxwell/The University of Southern Mississippi/IR Office - S Drive/NSSE")
library(readxl)
dat = read_xlsx("NSSE21 Student Comments with Codings", sheet = "End-of-Survey Comments FY")
dat = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "End-of-Survey Comments FY")
table(dat$Change)
table(dat$`Don’t_change`)
library(memisc)
percent(dat$Change)
percent(dat$`Don’t_change`)
dat = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "End-of-Survey Comments SR")
percent(dat$Change)
dat = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "End-of-Survey Comments FY")
dat2 = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "End-of-Survey Comments SR")
percent(dat$Change)
percent(dat2$Change)
percent(dat$`Don’t_change`)
percent(dat2$`Don’t_change`)
percent(dat$`Don’t_change`)
percent(dat$Covid)
percent(dat2$Covid)
dat3 = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "Acad. Advising Module Comments")
dat3 = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "Acad. Advising Module Comments")
dat4 = read_xlsx("NSSE21 Student Comments with Codings.xlsx", sheet = "SR Transitions Module Comments")
percent(dat3$Coding)
View(dat3)
colnames(dat3)[1] = "class"
dat3 = dat3[-1, ]
fy = subset(dat3,
dat3$class == "Freshman")
sy = subset(dat3,
dat3$class == "Senior")
tapply(dat3$coding,
dat3$class, percent)
tapply(dat3$Coding,
dat3$class, percent)
View(dat4)
dat4 = dat4[-1, ]
percent(dat4$Coding)
setwd("~/GitHub/Mitch-FWHR/Study 1")
#Study1
#2 x 2 repeated design
####Set up####
##Load libraries
library(memisc) #read in .sav
library(reshape) #data wrangling
library(lme4) #Mixed effects models
library(nlme) #more mixed effects models
library(ez) #anovas
##turn of scientific notation
options(scipen = 999)
#Study1
#2 x 2 repeated design
####Set up####
##Load libraries
library(memisc) #read in .sav
library(reshape) #data wrangling
library(lme4) #Mixed effects models
library(nlme) #more mixed effects models
library(ez) #anovas
##turn of scientific notation
options(scipen = 999)
##Read in the dataset
dat = as.data.set(spss.system.file("Study1.sav"))
dat = as.data.frame(dat)
##Check the data
summary(dat)
length(unique(dat$id))
#fix column names
colnames(dat)[2] = "High1N"
colnames(dat)[3] = "High1P"
#which ones are female?
table(dat$Sex) #2's
#let's factor sex
dat$Sex = factor(dat$Sex,
levels = c(1, 2),
labels = c("Male", "Female"))
##Get the data in long format
#going to drop the mean columns
dat.long = melt(dat[ , -c(45:48)],
id.vars = c("id", "Sex", "Age", "Race"))
colnames(dat.long)[5:6] = c("Type", "Score")
#now split out "type" column to get high/low and N/P
dat.long$fwhr = dat.long$Type
dat.long$fwhr = substr(dat.long$fwhr, 0, 1)
dat.long$Type = sub('.*(?=.{2}$)', '', dat.long$Type, perl=T)
dat.long$Type = substr(dat.long$Type, 2, 2)
colnames(dat.long)[5] = "Parenting"
dat.long$Score = as.numeric(dat.long$Score)
####Analyses####
##first try to reproduce the means
tapply(dat.long$Score, list(dat.long$Parenting, dat.long$fwhr), mean, na.rm = T)
#Remove the one NA
dat.long = na.omit(dat.long)
##Now the anova
ezANOVA(dat.long,
wid = id,
between = Sex,
within = .(Parenting, fwhr),
dv = Score,
type = 3,
detailed = T)
####model time!####
Final_model = lme(Score ~ Sex * Parenting * fwhr,
data = dat.long,
method = "ML",
na.action = "na.omit",
random = ~1|id)
summary(Final_model)
anova(model1)
####model time!####
##Try and LME model first
model1 = lme(Score ~ Sex * Parenting * fwhr,
data = dat.long,
method = "ML",
na.action = "na.omit",
random = ~1|id)
summary(model1)
anova(model1)
#Try lmer
lmm = lmer(Score ~ Sex * Parenting * fwhr + (1|id),
data = dat.long,
REML = FALSE)
summary(lmm)
anova(lmm)
library(car) #get p-values
Anova(lmm)
Anova(model1)
Anova(model1)
summary(model1)
summary(model2)
#Try lmer
model2 = lmer(Score ~ Sex * Parenting * fwhr + (1|id),
data = dat.long,
REML = FALSE)
summary(model2)
summary(model1)
summary(model2)
##Okay, I like the lmer model better syntax wise, but both return the same output. I will take that as a good sign.
#first, fit an intercept only model
model2.int = lmer(Score ~  + (1),
data = dat.long,
REML = FALSE)
##Okay, I like the lmer model better syntax wise, but both return the same output. I will take that as a good sign.
#first, fit an intercept only model
model2.int = lmer(Score ~  + 1,
data = dat.long,
REML = FALSE)
##Okay, I like the lmer model better syntax wise, but both return the same output. I will take that as a good sign.
#first, fit an intercept only model
model2.int = lmer(Score ~  + (1|id),
data = dat.long,
REML = FALSE)
summary(model2.int)
#now add the effects
#add the between first
model2.int = lmer(Score ~ Sex + (1|id),
data = dat.long,
REML = FALSE)
summary(model2.int)
#now add the effects
#add the between first
model2.between = lmer(Score ~ Sex + (1|id),
data = dat.long,
REML = FALSE)
summary(model2.between)
##Okay, I like the lmer model better syntax wise, but both return the same output. I will take that as a good sign.
#first, fit an intercept only model
model2.int = lmer(Score ~  + (1|id),
data = dat.long,
REML = FALSE)
summary(model2.int)
Anova(model2.int)
##Okay, I like the lmer model better syntax wise, but both return the same output. I will take that as a good sign.
#first, fit an intercept only model
model2.int = lmer(Score ~  + (1|id),
data = dat.long,
REML = FALSE)
summary(model2.int)
Anova(model2.int)
#now add the effects
#add the between first
model2.between = lmer(Score ~ Sex + (1|id),
data = dat.long,
REML = FALSE)
##compare models (full model should have a better fit)
anova(model2.int, model2.between, model2)
setwd("~/GitHub/CVOE-2021/1 YA/2 Analyses/3 Ex Gauss")
####Set up####
##libraries
library(retimes)
keeps = read.csv("Good Subjects.csv")
dat = read.csv("data/Final_CVOE_Trimmed 10_25_21.csv")
##cut out participants we aren't using
dat2 = dat[(dat$Subject %in% keeps$Sub.ID), ]
####Set up####
##libraries
library(retimes)
keeps = read.csv("Good Subjects.csv")
dat = read.csv("data/Final_CVOE_Trimmed 10_25_21.csv")
##cut out participants we aren't using
dat2 = dat[(dat$Subject %in% keeps$Sub.ID), ]
##get Trial types
#pure
pure = subset(dat2,
dat2$block_type == "cv" | dat2$block_type == "oe")
pure$type = rep("pure")
#Alt
alt = subset(dat2,
dat2$block_type == "alt")
alt_switch = subset(alt,
alt$Switch == "Y")
alt_ns = subset(alt,
alt$Switch == "N")
alt_switch$type = rep("alt_switch")
alt_ns$type = rep("alt_ns")
#rand
rand = subset(dat2,
dat2$block_type == "shuf")
rand_switch = subset(rand,
rand$Switch == "Y")
rand_ns = subset(rand,
rand$Switch == "N")
rand_switch$type = rep("rand_switch")
rand_ns$type = rep("rand_ns")
##put back together
combined = rbind(pure, alt_ns, alt_switch, rand_ns, rand_switch)
#get only correct trials
RT = subset(combined,
combined$score2 == 1)
#drop unused columns
RT = RT[ , -c(1, 3:11, 13:20)]
View(RT)
View(RT)
####Ex-GAUSS TIME####
for(i in RT$Subject){
print(i)
}
####Ex-GAUSS TIME####
for(i in unique(RT$Subject)){
print(i)
}
####Ex-GAUSS TIME####
##Start with pure
pure = subset(RT,
RT$type == "pure")
for(i in unique(RT$Subject)){
subset[i] = RT[RT$Subject == i]
}
RT$Subject == i
RT[RT$Subject == i]
RT[RT$Subject == i,]
#drop unused columns
pure = pure[ , -c(1, 3:11, 13:20)]
####Set up####
##libraries
library(retimes)
keeps = read.csv("Good Subjects.csv")
dat = read.csv("data/Final_CVOE_Trimmed 10_25_21.csv")
##cut out participants we aren't using
dat2 = dat[(dat$Subject %in% keeps$Sub.ID), ]
##get Trial types
#pure
pure = subset(dat2,
dat2$block_type == "cv" | dat2$block_type == "oe")
pure$type = rep("pure")
#Alt
alt = subset(dat2,
dat2$block_type == "alt")
alt_switch = subset(alt,
alt$Switch == "Y")
alt_ns = subset(alt,
alt$Switch == "N")
alt_switch$type = rep("alt_switch")
alt_ns$type = rep("alt_ns")
#rand
rand = subset(dat2,
dat2$block_type == "shuf")
rand_switch = subset(rand,
rand$Switch == "Y")
rand_ns = subset(rand,
rand$Switch == "N")
rand_switch$type = rep("rand_switch")
rand_ns$type = rep("rand_ns")
####Ex-GAUSS TIME####
##Start w/ pure
pure = subset(pure,
pure$score2 == 1)
pure = pure[ , -c(1, 3:11, 13:20)]
##need to loop over subjects and conditions
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
print(temp)
}
timefit(temp$RT)
print(timefit(temp$RT))
temp
View(temp)
##need to loop over subjects and conditions
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
print(timefit(temp$RT))
}
##need to loop over subjects and conditions
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
temp2 = (timefit(temp$RT))
}
View(temp2)
temp2$par
temp2
View(temp2)
temp2[1]
temp2[, 1]
temp2@par
temp2@par[1]
#mu
temp2@par[1, 1]
#mu
temp2@par[1, ]
#mu
temp2@par[1]
temp2@par[2]
#tau
temp2@par[3]
mu = c()
sigma = c()
tau = c()
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[2])
}
mu
mu = c(mu, temp2@par[1])
mean(mu)
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
}
#mu
temp2@par[1]
####Set up####
##libraries
library(retimes)
keeps = read.csv("Good Subjects.csv")
dat = read.csv("data/Final_CVOE_Trimmed 10_25_21.csv")
##cut out participants we aren't using
dat2 = dat[(dat$Subject %in% keeps$Sub.ID), ]
##get Trial types
#pure
pure = subset(dat2,
dat2$block_type == "cv" | dat2$block_type == "oe")
pure$type = rep("pure")
#Alt
alt = subset(dat2,
dat2$block_type == "alt")
alt_switch = subset(alt,
alt$Switch == "Y")
alt_ns = subset(alt,
alt$Switch == "N")
alt_switch$type = rep("alt_switch")
alt_ns$type = rep("alt_ns")
#rand
rand = subset(dat2,
dat2$block_type == "shuf")
rand_switch = subset(rand,
rand$Switch == "Y")
rand_ns = subset(rand,
rand$Switch == "N")
rand_switch$type = rep("rand_switch")
rand_ns$type = rep("rand_ns")
####Ex-GAUSS TIME####
##Start w/ pure
pure = subset(pure,
pure$score2 == 1)
pure = pure[ , -c(1, 3:11, 13:20)]
##need to loop over subjects and conditions
mu = c()
sigma = c()
tau = c()
for(i in unique(pure$Subject)){
temp = subset(pure, pure$Subject == i)
temp2 = (timefit(temp$RT))
mu = c(mu, temp2@par[1])
sigma = c(sigma, temp2@par[2])
tau = c(tau, temp2@par[3])
}
mean(mu)
mean(sigma)
mean(tau)
